<!-- saved from url=(0022)http://internet.e-mail -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0063)http://vulcano.dsc.ufpb.br/jacques/cursos/p2/html/listaexer.htm -->
<!-- saved from url=(0022)http://internet.e-mail -->
<!-- saved from url=(0022)http://internet.e-mail -->
<!-- saved from url=(0022)http://internet.e-mail -->
<!-- saved from url=(0063)http://vulcano.dsc.ufpb.br/jacques/cursos/p2/html/listaexer.htm -->
<html>

<head>
<title>Programação 2 - Lista de Exercícios</title>
<meta content="text/html; charset=windows-1252" http-equiv="Content-Type">
<meta content="Microsoft FrontPage 3.0" name="GENERATOR">
<meta content="C:\Arquivos de programas\Microsoft Office\Office\html.dot" name="Template">
</head>

<body link="#0000ff" vLink="#800080">
<font face="Arial" size="5"><b>

<p align="center">Programação 2</p>

<p align="center">Lista de Exercícios</p>
</b></font>

<h1 align="left">Observações</h1>

<ul>
  <li>A classe principal de cada questão deve se chamar QuestaoX onde X é o número da
    questão. Ex: a classe principal da 2a questão deve se chamar Questao2 e deve estar no
    arquivo Questao2.java. </li>
  <li>Deve ser entregue apenas o código fonte dos seus programas (*.java). </li>
  <li>Certifique-se que seus programas compilam corretamente, se a solução de alguma
    questão não puder ser compilada ela será considerada incorreta. </li>
  <li>Se seu programa estiver igual ao do seu colega vocês terão notas iguais, iguais a 0. </li>
  <li>As respostas devem ser empacotadas em um arquivo zip e enviadas, até as 24:00 da data
    combinada, para o e-mail <a href="mailto:alex@dsc.ufpb.br">alex@dsc.ufpb.br</a>. </li>
  <li>Serão descontados 5% da nota da lista para cada dia de atraso na entrega. </li>
</ul>

<h1>Lista 1: Introdução a Java</h1>

<h2>Questão 1</h2>

<p>Escreva um programa Java que imprima na saída padrão as suas informações pessoais.
O formato de entrada e saída do programa deve ser o seguinte:</p>

<p><strong>Exemplo:</strong><br>
Entrada</p>

<blockquote>
  <p>Não tem entrada.</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>Nome: Jose de Souza da Silva<br>
  Data de Nascimento: 31/07/1980<br>
  Naturalidade: Coxixola<br>
  Nacionalidade: Brasileira<br>
  Matricula: 20011234-5</p>
</blockquote>

<h2>Questão 2</h2>

<p>Escreva um programa Java que leia da entrada padrão dois números inteiros A e B, 0
&lt; (A, B) &lt; 1000, e imprima na saída padrão os resultados dos seguintes cálculos,
caso eles sejam possíveis: A + B, A - B, A % B, A * B, A / B, B / A</p>

<p><strong>Exemplo:</strong><br>
Entrada</p>

<blockquote>
  <p>4<br>
  6</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>10, -2, 4, 24, 0,1</p>
</blockquote>

<h2>Questão 3</h2>

<p>Escreva um programa em Java que leia da entrada padrão um número inteiro N, 0 &lt; N
&lt; 100, depois leia N números inteiros e imprima na saída padrão a soma e o produto
destes N números.</p>

<p><strong>Exemplo:</strong><br>
Entrada</p>

<blockquote>
  <p>10<br>
  1<br>
  2<br>
  3<br>
  4<br>
  5<br>
  6<br>
  7<br>
  8<br>
  9<br>
  10</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>Soma = 55<br>
  Produto = 3628800</p>
</blockquote>

<h2>Questão 4</h2>

<p>Escreva um programa em Java que leia da entrada padrão um número inteiro N, 0 &lt; N
&lt; 1000000, depois leia N números inteiros e imprima na saída padrão o menor valor, a
média aritmética, o maior valor, a quantidade de números pares e a quantidade de
números impares.</p>

<p><strong>Exemplo:</strong><br>
Entrada</p>

<blockquote>
  <p>10<br>
  1<br>
  2<br>
  3<br>
  4<br>
  5<br>
  6<br>
  7<br>
  8<br>
  9<br>
  10</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>Menor valor: 1<br>
  Valor medio: 5<br>
  Maior valor: 10<br>
  Pares: 5<br>
  Impares: 5</p>
</blockquote>

<h2>Questão 5</h2>

<p>Escreva um programa Java que leia da entrada padrão um número inteiro N, 1 &lt; N
&lt; 100000, e diga se N é um número primo ou não. Um número primo é aquele cujos
únicos divisores inteiros são o número 1 e o próprio número.</p>

<p><strong>Exemplo 1:</strong><br>
Entrada</p>

<blockquote>
  <p>10</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>O numero 10 nao eh um numero primo.</p>
</blockquote>

<p><strong>Exemplo 2:</strong><br>
Entrada</p>

<blockquote>
  <p>13</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>O numero 13 eh um numero primo.</p>
</blockquote>

<h1>Lista 2: Usando Objetos e Coleções</h1>

<h2>Questão 1</h2>

<p>Escreva um programa em Java para criar cinco contas simples para cinco clientes
diferentes, deposite uma quantia qualquer em cada uma das contas e depois imprima as
informações de cada uma delas.</p>

<p><strong>Exemplo</strong>:<br>
Entrada</p>

<blockquote>
  <p>Não tem entrada</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>ContaSimples numero 1, titular Joao, data 13/06/2001, saldo R$ 700,00<br>
  ContaSimples numero 2, titular Maria, data 13/06/2001, saldo R$ 130,00<br>
  ContaSimples numero 3, titular Pedro, data 13/06/2001, saldo R$ 300,00<br>
  ContaSimples numero 4, titular Jacques, data 13/06/2001, saldo R$ 10000000,00<br>
  ContaSimples numero 5, titular Alexandre, data 13/06/2001, saldo R$ 0,00</p>
</blockquote>

<h2>Questão 2</h2>

<p>Escreva um programa em Java para criar duas contas simples diferentes, deposite uma
quantia qualquer em cada uma das contas e imprima as informações de cada uma delas,
depois transfira uma quantia de uma conta para a outra e imprima novamente as
informações de cada uma delas.</p>

<p><strong>Exemplo</strong>:<br>
Entrada</p>

<blockquote>
  <p>Não tem entrada</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>ContaSimples numero 1, titular Joao, data 13/06/2001, saldo R$ 1000,00<br>
  ContaSimples numero 2, titular Maria, data 13/06/2001, saldo R$ 5000,00<br>
  ContaSimples numero 1, titular Joao, data 13/06/2001, saldo R$ 500,00<br>
  ContaSimples numero 2, titular Maria, data 13/06/2001, saldo R$ 5500,00</p>
</blockquote>

<h2>Questão 3</h2>

<p>Escreva um programa Java que leia Strings da entrada padrão, armazenando-as em uma
coleção, até encontrar o String fim, depois leia novamente vários Strings da entrada
padrão até encontrar a palavra fim e diga se cada uma delas foi lida anteriormente ou
não anteriormente.</p>

<p><strong>Exemplo</strong>:<br>
Entrada</p>

<blockquote>
  <p>Antonio<br>
  Pedro<br>
  Joao<br>
  Jose <br>
  Creusa<br>
  Matias<br>
  Rodrigo<br>
  fim<br>
  Antonio<br>
  Jeronimo<br>
  Carlos<br>
  Alexandre<br>
  fim</p>
</blockquote>

<p>Saída:</p>

<blockquote>
  <p>Antonio localizado<br>
  Jeronimo nao localizado<br>
  Carlos nao localizado<br>
  Alexandre localizado</p>
</blockquote>

<h2>Questão 4</h2>

<p>Escreva um programa Java que leia da entrada padrão números inteiros até encontrar a
palavra fim, ordene de forma crescente os números lidos e imprima na saída padrão o
conjunto de números ordenado.</p>

<p><strong>Exemplo</strong>:<br>
Entrada</p>

<blockquote>
  <p>10<br>
  5<br>
  6<br>
  7<br>
  8<br>
  9<br>
  20<br>
  34<br>
  1<br>
  5<br>
  fim</p>
</blockquote>

<p>Saída</p>

<blockquote>
  <p>1<br>
  5<br>
  5<br>
  6<br>
  7<br>
  8<br>
  9<br>
  10<br>
  20<br>
  34</p>
</blockquote>

<h2>Questão 5</h2>

<p>Escreva um programa Java que permita adicionar e remover Strings de uma coleção,
ordenar seu conteúdo lexicograficamente e imprimir na saída padrão o conteúdo da
coleção. O programa deve ler da entrada padrão os seguintes comandos:</p>

<blockquote>
  <p>adiciona xxx: adiciona o String xxx a coleção de dados<br>
  remove xxx: remove o String xxx da coleção de dados<br>
  ordena: ordena lexicograficamente a coleção de dados<br>
  imprime: imprime a coleção de dados na saída padrão<br>
  fim: encerra a execução do programa</p>
</blockquote>

<p>A coleção não deve aceitar valores duplicados nem deve permitir que se remova um
valor que não exista. Estes fatos devem ser notificados de forma adequada ao usuário.</p>

<p><strong>Exemplo</strong>:<br>
Entrada</p>

<blockquote>
  <p>adiciona Jose<br>
  adiciona Maria<br>
  adiciona Pedro<br>
  adiciona Jose<br>
  adiciona Creusa<br>
  remove Damiao<br>
  imprime<br>
  ordena<br>
  adiciona Matias<br>
  imprime<br>
  fim</p>
</blockquote>

<p>Saída:</p>

<blockquote>
  <p>Adicionando Jose.<br>
  Adicionando Maria.<br>
  Adicionando Pedro.<br>
  Impossivel adicionar Jose, conteudo duplicado.<br>
  Adicionando Creusa.<br>
  Impossivel remover Damiao, conteudo nao encontrado.<br>
  Imprimindo colecao:<br>
  1: Jose<br>
  2: Maria<br>
  3: Pedro<br>
  4: Creusa<br>
  Ordenando colecao.<br>
  Adicionando Matias.<br>
  Imprimindo colecao:<br>
  1: Creusa<br>
  2: Jose<br>
  3: Maria<br>
  4: Pedro<br>
  5: Matias</p>
</blockquote>

<p><strong>Dica</strong>: Use Entrada.in.lerPalavra() para ler uma única palavra da
entrada.</p>

<h1>Lista 3: Criando classes e usando Exceções</h1>

<h2>Questão 1</h2>

<p>Escreva uma classe para conter 2 membros do tipo real chamados largura e altura e chame
a classe de Retangulo.</p>

<p>A classe deve possuir os seguintes métodos: 

<ul>
  <li>um construtor que inicialize os atributos com zero e outro construtor que inicialize os
    atributos com um valor fixo; </li>
  <li>um método toString(); </li>
  <li>um método equals(); </li>
  <li>um método de acesso para alterar a altura; </li>
  <li>um método de acesso para alterar a largura; </li>
  <li>um método de acesso para retornar a altura; </li>
  <li>um método de acesso para retornar a largura; </li>
  <li>um método para calcular e retornar o perímetro do retângulo; </li>
  <li>um método para calcular e retornar a área do retângulo. </li>
</ul>

<p>Observação: sempre valide os atributos que estão sendo atualizados.</p>

<p>Crie um programa para testar a classe anterior.</p>

<h2>Questão 2</h2>

<p>Defina uma classe Java para representar uma pessoa. Uma pessoa, no nosso caso,&nbsp;
possui os seguintes atributos: 

<ul>
  <li>Nome </li>
  <li>Idade </li>
  <li>Altura&nbsp; </li>
  <li>Peso </li>
  <li>Sexo </li>
</ul>

<p>A classe deve possuir métodos para modificar e acessar cada um dos atributos,
construtores,&nbsp; um método para calcular o IMC (Índice de Massa Corpórea) e um
método toString() que fornece o nome da pessoa e uma descrição de sua categoria de
acordo com o IMC</p>

<p>O ICM é obtido através da divisão do peso pela altura (em metros) ao quadrado e é
interpretado da seguinte forma: 

<ul>
  <li>&nbsp;&nbsp; IMC &lt;= 18,5:&nbsp; Abaixo do peso normal </li>
  <li>&nbsp;&nbsp; 18,5 &lt; IMC &lt;= 25:&nbsp; Peso Normal </li>
  <li>&nbsp;&nbsp;&nbsp; 25 &lt; IMC &lt;= 30: Acima do peso normal. </li>
  <li>&nbsp;&nbsp;&nbsp; IMC &gt; 30: Obesidade </li>
</ul>

<p>Crie um programa para testar a classe anterior.</p>

<h2>Questão 3</h2>

<p>Refaça a 5a Questão da segunda lista de exercícios utilizando métodos e atributos.</p>

<p><b>Exemplo:</b></p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Vide Questão 5, lista 2.</p>

<h2>Questão 4</h2>

<p>Cria uma classe Java para representar um polígono qualquer. Um polígono é composto
por um conjunto de pontos e cada ponto possui duas coordenadas, x e y.&nbsp;&nbsp;A classe
Ponto deve possuir métodos para acessar e modificar as suas coordenadas, um métodos
equals() e um método toString(). A sua classe Poligono deve possuir métodos para
adicionar e remover pontos, acessar o conjunto de pontos, um&nbsp; toString() e um método
para calcular a sua área.&nbsp; Um exemplo de polígono:</p>

<p align="center">&nbsp;&nbsp;&nbsp; <img border="0" src="polyarea1.gif" width="346"
height="206"></p>

<p align="left">Para calcular a área de um polígono qualquer, desde que seus lados não
se interceptem,&nbsp; podemos utilizar a seguinte fórmula :</p>

<p align="left">&nbsp;</p>

<p align="center">&nbsp;&nbsp;&nbsp; <img border="0" src="polyarea2.gif" width="270"
height="84"></p>

<p align="left">Observações:&nbsp;</p>

<ul>
  <li><p align="left">No nosso problema não trataremos de polígonos com interseções de
    lados, como os abaixo.</p>
  </li>
</ul>

<p align="center"><img border="0" src="polyarea4.gif" width="191" height="90"></p>

<ul>
  <li><p align="left">Um polígono não pode ter pontos repetidos.</p>
  </li>
  <li><p align="left">Deve-se tratar o primeiro ponto do polígono como sucessor do último
    ponto no cálculo da área.</p>
  </li>
</ul>

<p>Crie um programa para testar a classe anterior.</p>

<h2>Questão 5</h2>

<p>Escreva uma classe que representa um array de bits. Esta classe deve fornecer métodos
para acessar um bit, modificar o valor de um bit, um método toString() que retorna o
conteúdo do array de bits, um método equals() e métodos para realizar as operações
lógicas AND, OR e NOT aplicados a arrays inteiros de bits. O construtor da classe deve
receber como parâmetro o tamanho do array. Devem ser tratadas exceções que possam
ocorrer durante o acesso ao array. Use a memória de forma eficiente.</p>

<p>Crie um programa para testar a classe anterior.</p>

<h1>Lista 4: Herança e Polimorfismo</h1>

<p>Nesta lista de exercícios iremos modelar um computador utilizando os conceitos de
orientação a objetos vistos em sala de aula. </p>

<p>Um <b>Computador</b>, no nosso caso, é um dispositivo que possui as seguintes
características: 

<ul>
  <li>Capacidade de processamento</li>
  <li>Capacidade de armazenamento de dados em memória não volátil (Discos Rígidos)</li>
  <li>Capacidade de armazenamento de dados em memória volátil (Memória Principal)</li>
  <li>Capacidade de extensão através da agregação de <b>Periféricos</b> </li>
</ul>

<p>Um <b>Periférico </b>é também um dispositivo e serve para estender a funcionalidade
de um computador, seja agregando novas características seja melhorando características
pre-existentes. Existem dois tipos de periféricos, de entrada e de saída .</p>

<p><b>Periféricos de entrada</b> são os que possibilitam a comunicação do meio externo
com o computador. Existe uma infinidade de periféricos de entrada; alguns dos mais comuns
são mouse, teclado, joystick, scanner, microfone, placa de rede e fax-modem.</p>

<p><b>Periféricos de saída</b> são os que possibilitam a comunicação do computador
com o meio externo. Existe também uma infinidade de periféricos de saída; os mais
comuns são monitor, impressora, auto-falante, placa de rede e fax-modem.</p>

<p><b>Obs</b>.: Lembre-se que o fato de um periférico ser de saída não implica que ele
não possa ser também de entrada, e vice-versa.</p>

<h2>Questão 1</h2>

<p>Defina o tipo abstrato de dados <b>Dispositivo</b>. Deve ser possível realizar as
seguintes operações sobre um dispositivo: 

<ul>
  <li>agregar outros dispositivos</li>
  <li>remover um dispositivo agregado</li>
  <li>saber quantos dispositivos estão agregados</li>
  <li>ligar e desligar um dispositivo</li>
</ul>

<h2><b>Questão 2</b></h2>

<p>Defina os tipos abstratos de dados <b>Periférico, PeriféricoDeEntrada,
PeriféricoDeSaída. </b>Um periférico é um dispositivo que possui um nome, uma marca um
modelo e um tipo de conexão. O tipo de conexão, no nosso caso, pode assumir um dos
seguintes valores: 

<ul>
  <li>PCI</li>
  <li>AGP</li>
  <li>ISA</li>
  <li>Porta USB</li>
  <li>Porta PS2</li>
  <li>Porta Serial </li>
  <li>Porta Paralela</li>
  <li>Saída de Vídeo</li>
</ul>

<p>Um periférico de entrada deve permitir a transmissão de dados do meio externo para o
computador, isso será feito através de um método chamado <b>entrada</b> que deve
receber um <b>Object</b> como parâmetro.</p>

<p>Um periférico de saída deve permitir a transmissão de dados do computador para o
meio externo, isso será feito através de um método chamado <b>saida </b>que deve
receber um <b>Object </b>como parâmetro.</p>

<p>Obs.: Os métodos <b>entrada </b>e <b>saida</b> são a interface de comunicação. Por
exemplo, se o computador precisa imprimir uma folha numa impressora ele chamaria o método
<b>saida</b> de um periférico adequado passando como paramêtro um objeto que
representasse a folha que ele deseja imprimir. Caso o usuário deseje enviar um comando
pelo teclado ao computador ele deve chamar o método <b>entrada</b> do periférico
adequado passando como paramêtro um objeto que representasse a seqüência de teclas
digitadas. </p>

<p>Obs.: Sempre que um dispositivo for ligado ele deve se identificar, por exemplo, ao
ligar uma impressora ela deve imprimir uma mensagem na tela do tipo : &quot;Ligando
impressora MARCA MODELO conectada a Porta Pararela&quot;</p>

<h2>Questão 3</h2>

<p>Defina o tipo de dados abstrato <b>Computador</b>. Um computador é um dispositivo que
possui as características que foram descritas mais acima. Uma outra característica muito
importante de um computador é a sua capacidade de extensão. Um computador pode ser
estendido através da agregação de novos <b>Periféricos</b>, mas essa extensão não é
infinita. Para adicionar um novo periférico é preciso saber se o computador possui
disponível algum ponto de conexão com o mesmo tipo de conexão do periférico. Um
computador convencional possui a seguinte distribuição de pontos de conexão <b>:</b> 

<ul>
  <li>1 slot AGP</li>
  <li>2 slots PCI</li>
  <li>1 slot ISA</li>
  <li>1 Porta USB</li>
  <li>1 Porta PS2</li>
  <li>1 Porta Serial</li>
  <li>1 Porta Paralela</li>
  <li>1 Saída de Vídeo</li>
</ul>

<p>Obs.: Sempre que um computador é ligado todos os dispositivos agregados a ele também
o são. </p>

<h2>Questao 4</h2>

<p>Nesta questão testaremos os tipos abstratos definidos anteriormente, para isso crie um
Computador, pelo menos 3 periféricos de saída distintos e pelo menos 3 periféricos de
entrada distintos.</p>

<p>Adicione os periféricos ao computador, quando for possível, ligue o computador, e
realize um série de (pelo menos 30) operações de entrada e saída utilizando os
diversos dispositivos criados.</p>

<p>Cada dispositivo criado deve se identificar cada vez que for realizar uma operação,
por exemplo, toda vez que o computador desejar imprimir algo na impressora ela deverá
imprimir uma mensagem na tela do tipo &quot;Impressora MARCA MODELO imprimindo
DADOS&quot;.</p>

<h2>Questão 5</h2>

<p>Efetue as modificações necessárias na sua hierarquia de classes e interfaces para
permitir modelar uma rede de computadores. Uma rede pode agregar computadores, impressoras
ou qualquer outro dispositivo que possa ser referenciado pela tecnologia utilizada.</p>

<h1>Lista 5: Regras de Design e Composição</h1>

<p>Nesta lista de exercícios trabalharemos com o fascinante mundo da música. </p>

<h2>Questão 1</h2>

<p>Crie uma representação para as 7 notas musicais, DO, RÉ, MI, FA, SOL, LA e SI. Deve
ser possível modificar cada uma das notas para obter um som sustenido ou bemol e cada
nota deve possuir um tempo de duração especificado pelo compositor. O ato de tocar uma
nota musical deve ser representado pela impressão na saída padrão do seu valor,seguido
pelo modificador, caso exista, seguido pelo tempo de duração.</p>

<h2>Questão 2</h2>

<p>Crie uma representação para uma melodia. Uma melodia é um conjunto de notas musicais
separadas por intervalos de tempo definidos pelo compositor. Deve ser possível adicionar
notas musicais, intervalos de tempo, trechos de outras melodias ou melodias completas à
uma nova melodia. O ato de tocar uma melodia deve ser representado pela impressão na
saída padrão de todas as suas notas musicais seguidas pelos intervalos de separação
entre elas.</p>

<h2>Questão 3</h2>

<p>Crie uma representação para a letra de uma música. A letra de uma música é um
texto formado por várias frases. Um frase é formada por palavras e por intervalos de
tempo entre as palavras. Novamente os intervalos de tempo devem poder ser configurados
pelo autor da letra. Deve ser possível indicar que uma determinada frase da letra deve
ser repetida (bis) e que um determinado trecho da letra é o refrão da canção. O ato de
tocar uma música deve ser representado pela impressão na saída padrão de todas as suas
palavras, seguidas pelo intervalo de tempo entre elas.</p>

<h2>Questão 4</h2>

<p>Crie uma representação para uma música. Uma música é formada por uma letra e por
uma melodia. Deve ser possível combinar músicas para criar um Pot-pourri. Tocar uma
música significa imprimir na saida padrão sua melodia e sua letra. </p>

<h2>Questão 5</h2>

<p>Crie um pequeno editor que permita compor e &quot;tocar&quot; músicas para testar as
suas classes.</p>
</body>
</html>
